apply plugin: 'com.android.application'
apply plugin: 'io.fabric'


repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {

    compileSdkVersion 27
    def keystorePropertyFile = rootProject.file('keystore/keystore.properties')
    def keystoreProperty = new Properties()
    keystoreProperty.load(new FileInputStream(keystorePropertyFile))

    def versionPropFile = file('../version.properties')
    def versionBuild

    if (versionPropFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropFile))
        versionBuild = versionProps['VERSION_BUILD'].toInteger()
    } else {
        throw new FileNotFoundException("Could not read version.properties file")
    }

    ext.autoIncrementBuildNumber = {
        if (versionPropFile.canRead()) {
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropFile))
            versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
            versionProps['VERSION_BUILD'] = versionBuild.toString()
            versionProps.store(versionPropFile.newWriter(), null)
            System.out.println('VersionCode=' + versionBuild)
        }
    }



    defaultConfig {
        applicationId "albertsons.com.m1app"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode versionBuild
        versionName "1.0." + versionBuild
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        config {
            keyAlias keystoreProperty.getProperty('keyAlias')
            keyPassword keystoreProperty.getProperty('keyPassword')
            storeFile file(keystoreProperty.getProperty('storeFile'))
            storePassword keystoreProperty.getProperty('storePassword')
        }
    }


    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }

        debug {
            debuggable true
        }
    }

    gradle.taskGraph.whenReady {
        taskGraph ->
//            if (taskGraph.hasTask(assembleDebug)) {
//                System.out.println ('Now running assembleDebug task!')
//                autoIncrementBuildNumber()
//            }

            if (taskGraph.hasTask(assembleRelease)) {
                autoIncrementBuildNumber()
            }
    }

    lintOptions {
        abortOnError false
    }
    dexOptions {
        javaMaxHeapSize "4096m"
    }

}

ext {
    retrofitVersion = '2.0.2'
    supportLibraryVersion = '27.0.2'
    daggerVersion = '2.11'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //compile files ('libs/com.symbol.emdk.jar')
    compile files ('libs/ZSDK_ANDROID_API.jar')
    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    implementation "com.android.support:design:$supportLibraryVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:multidex:1.0.2'
    implementation 'org.apache.commons:commons-lang3:3.5'
    implementation("com.squareup.retrofit2:retrofit:$retrofitVersion") {
        exclude group: 'com.squareup.okhttp3'
    }
    implementation('com.squareup.okhttp3:logging-interceptor:3.6.0')
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation("com.squareup.retrofit2:converter-gson:$retrofitVersion") {
        exclude group: 'com.google.code.gson'
    }
//    implementation ('com.mobprofs:retrofit-simplexmlconverter:1.1'){
//        exclude group: 'com.google.code.gson'
//    }
    //implementation 'org.simpleframework:simple-xml:2.7.1'

    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'io.reactivex:rxjava:1.1.6'
    implementation "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"

    annotationProcessor 'com.jakewharton:butterknife-compiler:8.0.1'
    implementation('com.jakewharton:butterknife:8.0.1') {
        exclude group: 'com.android.support'
    }

    implementation "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"

    implementation 'com.google.zxing:core:3.2.1'
    implementation 'com.journeyapps:zxing-android-embedded:3.2.0@aar'

    implementation('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}
